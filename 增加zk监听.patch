Index: dubbo-helper-admin/src/main/java/com/dubbohelper/admin/config/Config.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dubbo-helper-admin/src/main/java/com/dubbohelper/admin/config/Config.java	(date 1542945417361)
+++ dubbo-helper-admin/src/main/java/com/dubbohelper/admin/config/Config.java	(date 1542945417361)
@@ -0,0 +1,18 @@
+package com.dubbohelper.admin.config;
+
+import lombok.Getter;
+import lombok.Setter;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Component;
+
+/**
+ * Created by zhangxiaoman on 2018/11/14.
+ */
+@Getter
+@Setter
+@Component
+public class Config {
+
+    @Value("${dubbo.registry.address}")
+    String dubboUrl;
+}
Index: dubbo-helper-admin/src/main/java/com/dubbohelper/admin/dto/Application.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dubbo-helper-admin/src/main/java/com/dubbohelper/admin/dto/Application.java	(date 1542940360495)
+++ dubbo-helper-admin/src/main/java/com/dubbohelper/admin/dto/Application.java	(date 1542940360495)
@@ -0,0 +1,44 @@
+package com.dubbohelper.admin.dto;
+
+import lombok.Builder;
+import lombok.Getter;
+import lombok.Setter;
+
+import java.io.Serializable;
+import java.util.Set;
+import java.util.TreeSet;
+
+/**
+ * Created by zhangxiaoman on 2018/11/14.
+ */
+@Getter
+@Setter
+@Builder
+public class Application implements Serializable, Comparable<Application> {
+    /**
+     * 应用名
+     */
+    String application;
+
+    String groupId;
+
+    String artifactId;
+
+    final Set<Version> versions = new TreeSet<>();
+
+    /**
+     * 负责人
+     */
+    String owner;
+
+    /**
+     * zk节点路径-方便快速定位
+     */
+    String path;
+
+    @Override
+    public int compareTo(Application o) {
+//        if(o.getApplication().equals(application))
+        return 0;
+    }
+}
Index: dubbo-helper-admin/src/main/java/com/dubbohelper/admin/dto/Constants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dubbo-helper-admin/src/main/java/com/dubbohelper/admin/dto/Constants.java	(date 1542695615031)
+++ dubbo-helper-admin/src/main/java/com/dubbohelper/admin/dto/Constants.java	(date 1542695615031)
@@ -0,0 +1,24 @@
+package com.dubbohelper.admin.dto;
+
+/**
+ * Created by zhangxiaoman on 2018/11/13.
+ */
+public class Constants {
+
+    public static final String PROVIDER = "providers";
+
+    public static final String APPLICATION = "application";
+
+    public static final String GROUP_ID = "organization";
+
+    public static final String ARTIFACT = "architecture";
+
+    public static final String VERSION = "revision";
+
+    public static final String APPLICATION_VERSION = "application.version";
+
+    public static final String DEFAULT_VERSION = "default.version";
+
+    public static final String DUBBO_PATH = "/dubbo";
+
+}
Index: dubbo-helper-admin/src/main/java/com/dubbohelper/admin/dto/URL.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dubbo-helper-admin/src/main/java/com/dubbohelper/admin/dto/URL.java	(date 1542940374084)
+++ dubbo-helper-admin/src/main/java/com/dubbohelper/admin/dto/URL.java	(date 1542940374084)
@@ -0,0 +1,141 @@
+package com.dubbohelper.admin.dto;
+
+import com.google.gson.Gson;
+import lombok.Getter;
+import lombok.Setter;
+
+import java.io.Serializable;
+import java.io.UnsupportedEncodingException;
+import java.net.URLDecoder;
+import java.net.URLEncoder;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Created by zhangxiaoman on 2018/11/13.
+ */
+@Getter
+@Setter
+public final class URL implements Serializable {
+
+    private final String protocol;
+
+    private final String host;
+
+    private final int port;
+
+    private final String path;
+
+    private final String username;
+
+    private final String password;
+
+    private final Map<String, String> parameters;
+
+    protected URL() {
+        this.protocol = null;
+        this.host = null;
+        this.port = 0;
+        this.path = null;
+        this.parameters = null;
+        this.password = null;
+        this.username = null;
+    }
+    public URL(String protocol, String host, int port, String path, Map<String, String> parameters, String username, String password){
+        this.protocol = protocol;
+        this.host = host;
+        this.port = port;
+        this.path = path;
+        this.parameters = parameters;
+        this.username = username;
+        this.password = password;
+    }
+
+    public static URL valueOf(String url) {
+        if (url == null || (url = url.trim()).length() == 0) {
+            throw new IllegalArgumentException("url == null");
+        }
+        String protocol = null;
+        String host = null;
+        int port = 0;
+        String path = null;
+        String username = null;
+        String password = null;
+        Map<String, String> parameters = null;
+        int i = url.indexOf("?"); // seperator between body and parameters
+        if (i >= 0) {
+            String[] parts = url.substring(i + 1).split("\\&");
+            parameters = new HashMap<String, String>();
+            for (String part : parts) {
+                part = part.trim();
+                if (part.length() > 0) {
+                    int j = part.indexOf('=');
+                    if (j >= 0) {
+                        parameters.put(part.substring(0, j), part.substring(j + 1));
+                    } else {
+                        parameters.put(part, part);
+                    }
+                }
+            }
+            url = url.substring(0, i);
+        }
+        i = url.indexOf("://");
+        if (i >= 0) {
+            if (i == 0) throw new IllegalStateException("url missing protocol: \"" + url + "\"");
+            protocol = url.substring(0, i);
+            url = url.substring(i + 3);
+        } else {
+            i = url.indexOf(":/");
+            if (i >= 0) {
+                if (i == 0) throw new IllegalStateException("url missing protocol: \"" + url + "\"");
+                protocol = url.substring(0, i);
+                url = url.substring(i + 1);
+            }
+        }
+
+        i = url.indexOf("/");
+        if (i >= 0) {
+            path = url.substring(i + 1);
+            url = url.substring(0, i);
+        }
+        i = url.lastIndexOf("@");
+        if (i >= 0) {
+            username = url.substring(0, i);
+            int j = username.indexOf(":");
+            if (j >= 0) {
+                password = username.substring(j + 1);
+                username = username.substring(0, j);
+            }
+            url = url.substring(i + 1);
+        }
+        i = url.indexOf(":");
+        if (i >= 0 && i < url.length() - 1) {
+            port = Integer.parseInt(url.substring(i + 1));
+            url = url.substring(0, i);
+        }
+        if (url.length() > 0) host = url;
+        return new URL(protocol, host, port, path, parameters, username, password);
+    }
+
+    public static String encode(String value) {
+        if (value == null || value.length() == 0) {
+            return "";
+        }
+        try {
+            return URLEncoder.encode(value, "UTF-8");
+        } catch (UnsupportedEncodingException e) {
+            throw new RuntimeException(e.getMessage(), e);
+        }
+    }
+
+    public static String decode(String value) {
+        if (value == null || value.length() == 0) {
+            return "";
+        }
+        try {
+            return URLDecoder.decode(value, "UTF-8");
+        } catch (UnsupportedEncodingException e) {
+            throw new RuntimeException(e.getMessage(), e);
+        }
+    }
+}
Index: dubbo-helper-admin/src/main/java/com/dubbohelper/admin/dto/Version.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dubbo-helper-admin/src/main/java/com/dubbohelper/admin/dto/Version.java	(date 1542940360590)
+++ dubbo-helper-admin/src/main/java/com/dubbohelper/admin/dto/Version.java	(date 1542940360590)
@@ -0,0 +1,35 @@
+package com.dubbohelper.admin.dto;
+
+import lombok.Builder;
+import lombok.Getter;
+import lombok.Setter;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by zhangxiaoman on 2018/11/16.
+ */
+@Getter
+@Setter
+@Builder
+public class Version implements Comparable<Version> {
+
+    /**
+     * pom版本
+     */
+    String version;
+
+    /**
+     * provider版本列表
+     * 默认版本为空
+     */
+    final List<String> defaultVersions = new ArrayList<>();
+
+    @Override
+    public int compareTo(Version o) {
+       if(o.getVersion().equals(version))
+           return 0;
+        return -1;
+    }
+}
Index: dubbo-helper-admin/src/main/java/com/dubbohelper/admin/service/impl/RegisterServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dubbo-helper-admin/src/main/java/com/dubbohelper/admin/service/impl/RegisterServiceImpl.java	(date 1542945589077)
+++ dubbo-helper-admin/src/main/java/com/dubbohelper/admin/service/impl/RegisterServiceImpl.java	(date 1542945589077)
@@ -0,0 +1,81 @@
+package com.dubbohelper.admin.service.impl;
+
+import com.dubbohelper.admin.dto.Application;
+import com.dubbohelper.admin.service.RegisterService;
+import com.dubbohelper.admin.service.sync.RegisterServiceSync;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import org.springframework.util.StringUtils;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Created by zhangxiaoman on 2018/11/15.
+ */
+@Slf4j
+@Service
+public class RegisterServiceImpl implements RegisterService {
+    @Autowired
+    private RegisterServiceSync registerServiceSync;
+
+    @Override
+    public List<String> myCollect(String ip) {
+        List<String> rst = new ArrayList<>();
+        rst.addAll(registerServiceSync.collectApplications.get(ip));
+        if(rst.size() == 0){
+            //TODO 从cookie中读取
+        }
+        return rst;
+    }
+
+    @Override
+    public List<Application> search(String keyWord) {
+        List<Application> list = new ArrayList<>();
+        if (StringUtils.isEmpty(keyWord)) {//全量搜索只展示前10条
+            int i = 0;
+            for (Map.Entry<String, Application> entry : registerServiceSync.registryApplicationMap.entrySet()) {
+                if (i < 10) {
+                        Application app1 = entry.getValue();
+                        Application app = Application.builder()
+                                .application(app1.getApplication())
+                                .groupId(app1.getGroupId())
+                                .artifactId(app1.getArtifactId())
+                                .owner(app1.getOwner())
+                                .build();
+                        list.add(app);
+                }
+                i++;
+            }
+            return list;
+        }
+        for (Map.Entry<String, Application> entry : registerServiceSync.registryApplicationMap.entrySet()) {
+            String appName = entry.getKey();
+            if(appName.contains(keyWord)){
+                Application app1 = entry.getValue();
+                Application app = Application.builder()
+                                .application(app1.getApplication())
+                                .groupId(app1.getGroupId())
+                                .artifactId(app1.getArtifactId())
+                                .owner(app1.getOwner())
+                                .build();
+                        list.add(app);
+            }
+        }
+        return list;
+    }
+
+    @Override
+    public void mark(String ip, String applicationName) {
+        List<String> list = registerServiceSync.collectApplications.get(ip);
+        if (null == list) {
+            List<String> apps = new ArrayList<>();
+            apps.add(applicationName);
+            registerServiceSync.collectApplications.put(ip, apps);
+        } else {
+            list.add(applicationName);
+        }
+    }
+}
Index: dubbo-helper-admin/src/main/java/com/dubbohelper/admin/service/sync/RegisterServiceSync.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dubbo-helper-admin/src/main/java/com/dubbohelper/admin/service/sync/RegisterServiceSync.java	(date 1542945508166)
+++ dubbo-helper-admin/src/main/java/com/dubbohelper/admin/service/sync/RegisterServiceSync.java	(date 1542945508166)
@@ -0,0 +1,259 @@
+package com.dubbohelper.admin.service.sync;
+
+import com.dubbohelper.admin.config.Config;
+import com.dubbohelper.admin.dto.Application;
+import com.dubbohelper.admin.dto.Constants;
+import com.dubbohelper.admin.dto.URL;
+import com.dubbohelper.admin.dto.Version;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.curator.RetryPolicy;
+import org.apache.curator.framework.CuratorFramework;
+import org.apache.curator.framework.CuratorFrameworkFactory;
+import org.apache.curator.framework.recipes.cache.TreeCache;
+import org.apache.curator.framework.recipes.cache.TreeCacheEvent;
+import org.apache.curator.framework.recipes.cache.TreeCacheListener;
+import org.apache.curator.retry.ExponentialBackoffRetry;
+import org.springframework.beans.factory.DisposableBean;
+import org.springframework.beans.factory.InitializingBean;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import org.springframework.util.StringUtils;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.net.URLDecoder;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+
+/**
+ * Created by zhangxiaoman on 2018/11/14.
+ */
+@Service
+@Slf4j
+public class RegisterServiceSync implements InitializingBean, DisposableBean {
+
+    @Autowired
+    private Config config;
+
+    private static CuratorFramework client;
+
+
+    private static TreeCache cache;
+
+
+    /**
+     * 用户收藏列表
+     * key:ip
+     * value:应用名列表
+     */
+    public Map<String, List<String>> collectApplications = new HashMap<>();
+
+    /**
+     * 应用列表
+     * key:应用名
+     * value：应用实体
+     */
+    public ConcurrentMap<String, Application> registryApplicationMap = new ConcurrentHashMap<>();
+
+
+    @Override
+    public void afterPropertiesSet() throws Exception {
+
+        RetryPolicy retryPolicy = new ExponentialBackoffRetry(10000, 3);
+        client = CuratorFrameworkFactory.builder()
+                .connectString(config.getDubboUrl())
+                .retryPolicy(retryPolicy)
+                .sessionTimeoutMs(10000)
+                .connectionTimeoutMs(10000)
+                .build();
+        client.start();
+
+
+
+        //初始化应用列表
+        List<String> serviceList = client.getChildren().forPath(Constants.DUBBO_PATH);
+        for (String service : serviceList) {
+            String path = new StringBuilder(Constants.DUBBO_PATH).append("/").append(service).append("/").append(Constants.PROVIDER).toString();
+
+            List<String> children = client.getChildren().forPath(path);
+            for (String urlStr : children) {
+                URL url = URL.valueOf(URL.decode(urlStr));
+
+                String applicationName = url.getParameters().get(Constants.APPLICATION);
+                String groupId = url.getParameters().get(Constants.GROUP_ID);
+                String artifactId = url.getParameters().get(Constants.ARTIFACT);
+                String versionStr = url.getParameters().get(Constants.VERSION);
+                if (StringUtils.isEmpty(versionStr)) {
+                    versionStr = url.getParameters().get(Constants.APPLICATION_VERSION);
+                }
+                if (hasEmpty(applicationName, groupId, artifactId, versionStr)) {
+                    return;
+                }
+                String defaultVersion = "";
+                if (null != url.getParameters().get(Constants.DEFAULT_VERSION)) {
+                    defaultVersion = url.getParameters().get(Constants.DEFAULT_VERSION);
+                }
+                Application application = registryApplicationMap.get(applicationName);
+                if (null == application) {
+                    application = Application.builder().application(applicationName).groupId(groupId).artifactId(artifactId).path(path).build();
+                    application.setPath(path);
+                }
+                if (!StringUtils.isEmpty(versionStr)) {
+                    Version version = Version.builder().version(versionStr).build();
+                    version.getDefaultVersions().add(defaultVersion);
+                    application.getVersions().add(version);
+                }
+                registryApplicationMap.put(applicationName, application);
+            }
+        }
+
+    }
+
+    /**
+     * 添加监听
+     *
+     * @throws Exception
+     */
+    private void listener() throws Exception {
+        cache = new TreeCache(client, Constants.DUBBO_PATH);
+        TreeCacheListener listener1 = (client1, event) -> {
+            TreeCacheEvent.Type type = event.getType();
+            if (null != event.getData()) {
+                String path = URL.decode(event.getData().getPath());
+                if (type.equals(TreeCacheEvent.Type.NODE_ADDED)) {
+                    //节点添加
+                    add((path));
+                } else if (type.equals(TreeCacheEvent.Type.NODE_UPDATED)) {
+                    //节点更新
+                    update(path);
+                } else if (type.equals(TreeCacheEvent.Type.NODE_REMOVED)) {
+                    //节点删除
+                    delete(path);
+                }
+            }
+            log.info("事件类型：{}", event.getType());
+            log.info("路径:{}", (null != event.getData() ? URLDecoder.decode(event.getData().getPath()) : null));
+
+        };
+
+        cache.getListenable().addListener(listener1);
+        cache.start();
+    }
+
+    private void add(String path) {
+        if (StringUtils.isEmpty(path) || !path.contains("/providers/")) {
+            return;
+        }
+
+        int index = path.indexOf("/dubbo:");
+        if (index == -1) {
+            return;
+        }
+        String urlPath = path.substring(index);
+        URL url = URL.valueOf(urlPath);
+        String servicePath = path.substring(0, index);
+
+        String applicationName = url.getParameters().get(Constants.APPLICATION);
+        String groupId = url.getParameters().get(Constants.GROUP_ID);
+        String artifactId = url.getParameters().get(Constants.ARTIFACT);
+        String versionStr = url.getParameters().get(Constants.VERSION);
+        if (StringUtils.isEmpty(versionStr)) {
+            versionStr = url.getParameters().get(Constants.APPLICATION_VERSION);
+        }
+        if (hasEmpty(applicationName, groupId, artifactId, versionStr)) {
+            return;
+        }
+
+        String defaultVersion = "";
+        if (null != url.getParameters().get(Constants.DEFAULT_VERSION)) {
+            defaultVersion = url.getParameters().get(Constants.DEFAULT_VERSION);
+        }
+        Application application = registryApplicationMap.get(applicationName);
+
+        if (null == application) {
+            application = Application.builder().application(applicationName).groupId(groupId).artifactId(artifactId).path(path).build();
+            application.setPath(servicePath);
+        }
+        if (!StringUtils.isEmpty(versionStr)) {
+            Version version = Version.builder().version(versionStr).build();
+            version.getDefaultVersions().add(defaultVersion);
+            application.getVersions().add(version);
+        }
+        registryApplicationMap.put(applicationName, application);
+    }
+
+    private void update(String path) {
+        //TODO
+    }
+
+    private void delete(String path) {
+        if (StringUtils.isEmpty(path) || !path.contains("/providers/")) {
+            return;
+        }
+
+        path = path.substring(path.indexOf("dubbo:"));
+        URL url = URL.valueOf(path);
+        String applicationName = url.getParameters().get(Constants.APPLICATION);
+        Application app = registryApplicationMap.get(applicationName);
+
+        if (null == app) {
+            return;
+        }
+        String defaultVersion = "";
+        if (null != url.getParameters().get(Constants.DEFAULT_VERSION)) {
+            defaultVersion = url.getParameters().get(Constants.DEFAULT_VERSION);
+        }
+
+        String versionStr = url.getParameters().get(Constants.VERSION);
+        if (StringUtils.isEmpty(versionStr)) {
+            versionStr = url.getParameters().get(Constants.APPLICATION_VERSION);
+            if (StringUtils.isEmpty(versionStr)) {
+                return;
+            }
+        }
+
+        Iterator<Version> iter = app.getVersions().iterator();
+        while (iter.hasNext()) {
+            Version version = iter.next();
+            if (version.getVersion().equals(versionStr)) {
+                List<String> defaultVersions = version.getDefaultVersions();
+                Iterator<String> iter2 = defaultVersions.iterator();
+                while (iter2.hasNext()) {
+                    String defaultVer = iter2.next();
+                    if (defaultVer.equals(defaultVersion)) {
+                        iter2.remove();
+                    }
+                }
+                if (defaultVersions.size() == 0) {
+                    iter.remove();
+                }
+            }
+        }
+        if (app.getVersions().size() == 0) {
+            registryApplicationMap.remove(applicationName);
+        }
+    }
+
+    @Override
+    public void destroy()  {
+        cache.close();
+        client.close();
+    }
+
+    private boolean hasEmpty(String... strs) {
+        boolean b = false;
+        for (String str : strs) {
+            if (StringUtils.isEmpty(str)) {
+                b = true;
+            }
+        }
+        return b;
+    }
+}
Index: dubbo-helper-admin/src/main/java/com/dubbohelper/admin/service/RegisterService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dubbo-helper-admin/src/main/java/com/dubbohelper/admin/service/RegisterService.java	(date 1542940455269)
+++ dubbo-helper-admin/src/main/java/com/dubbohelper/admin/service/RegisterService.java	(date 1542940455269)
@@ -0,0 +1,30 @@
+package com.dubbohelper.admin.service;
+
+import com.dubbohelper.admin.dto.Application;
+
+import java.util.List;
+
+/**
+ * Created by zhangxiaoman on 2018/11/15.
+ */
+public interface RegisterService {
+    /**
+     * 我的收藏
+     * @param ip
+     * @return
+     */
+    List<String> myCollect(String ip);
+
+    /**
+     * 搜索应用
+     * @param keyWord
+     * @return
+     */
+    List<Application> search(String keyWord);
+
+    /**
+     * 收藏应用
+     * @param appName
+     */
+    void mark(String ip, String appName);
+}
Index: dubbo-helper-admin/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>NATIVE_TO_ASCII_UTF-8
===================================================================
--- dubbo-helper-admin/src/main/resources/application.properties	(revision 808758ed9d75cb00fa58f1b2f38b917e1cb8bcaf)
+++ dubbo-helper-admin/src/main/resources/application.properties	(date 1542952643579)
@@ -1,2 +1,4 @@
 spring.mvc.view.prefix = /WEB-INF/views/
-spring.mvc.view.suffix = .jsp
\ No newline at end of file
+spring.mvc.view.suffix = .jsp
+
+dubbo.registry.address = localhost:2181
Index: dubbo-helper-admin/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dubbo-helper-admin/pom.xml	(revision 808758ed9d75cb00fa58f1b2f38b917e1cb8bcaf)
+++ dubbo-helper-admin/pom.xml	(date 1542940521432)
@@ -85,6 +85,24 @@
             <artifactId>dubbo-helper</artifactId>
             <version>1.0.0-SNAPSHOT</version>
         </dependency>
+
+        <!-- zk相关 -->
+        <dependency>
+            <groupId>org.apache.curator</groupId>
+            <artifactId>curator-framework</artifactId>
+            <version>4.0.1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.curator</groupId>
+            <artifactId>curator-client</artifactId>
+            <version>4.0.1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.curator</groupId>
+            <artifactId>curator-recipes</artifactId>
+            <version>4.0.1</version>
+        </dependency>
+        <!-- zk相关 -->
         
     </dependencies>
 
